---
import type { MarkdownHeading } from "astro";
import { FullWidthContainer } from "@chromatic-com/tetra";
import { getCollection } from "astro:content";
import "@docsearch/css";
import SEO from "../components/SEO.astro";
import Scripts from "../components/Scripts.astro";
import EditAndFeedback from "../components/EditAndFeedback.astro";
import { ContentContainer } from "../components/ContentContainer";
import { MarketingFooter } from "../components/Footer/MarketingFooter";
import { MarketingHeader } from "../components/Header/MarketingHeader";
import { LayoutGrid } from "../components/LayoutGrid";
import Navigation from "../components/Navigation/Navigation.astro";
import { projectRoot } from "../util";
import OnThisPage from "../components/OnThisPage.astro";
import SearchMeta from "../components/SearchMeta.astro";
import { globalStyles } from "../styles/global";

type Props = {
  title: string;
  description: string;
  url: string;
  file?: string;
  headings: MarkdownHeading[];
  slug: string;
  sidebarOrder?: number;
};

const { title, description, slug, sidebarOrder } = Astro.props;
const { pathname } = Astro.url;
const overview = await getCollection("overview");
const storybook = await getCollection("storybook");
const playwright = await getCollection("playwright");
const cypress = await getCollection("cypress");
const configuration = await getCollection("configuration");
const modes = await getCollection("modes");
const snapshot = await getCollection("snapshot");
const snapshotOptions = await getCollection("snapshotOptions");
const turbosnap = await getCollection("turbosnap");
const collaborate = await getCollection("collaborate");
const plugins = await getCollection("plugins");
const ci = await getCollection("ci");
const account = await getCollection("account");
const guides = await getCollection("guides");
const troubleshooting = await getCollection("troubleshooting");

const navItems = [
  {
    title: "Overview",
    items: overview,
    defaultOpen: true,
    timeline: true,
  },
  {
    title: "Storybook",
    items: storybook,
    defaultOpen: false,
    timeline: true,
  },
  {
    title: "Playwright",
    items: playwright,
    timeline: true,
  },
  {
    title: "Cypress",
    items: cypress,
    timeline: true,
  },
  {
    title: "Guides",
    items: guides,
  },
  {
    title: "Configuration",
    items: configuration,
  },
  {
    title: "Modes",
    items: modes,
  },
  {
    title: "Snapshot",
    items: snapshot,
  },
  {
    title: "Snapshot options",
    items: snapshotOptions,
  },
  {
    title: "TurboSnap",
    items: turbosnap,
    timeline: true,
  },
  {
    title: "Collaborate",
    items: collaborate,
  },
  {
    title: "CI",
    items: ci,
  },
  {
    title: "Plugins",
    items: plugins,
  },
  {
    title: "Account",
    items: account,
  },
  {
    title: "Troubleshooting",
    items: troubleshooting,
  },
];

const editUrl = Astro.props.file?.replace(projectRoot, "").replace("src/", "");
---

<html lang="en">
  <head>
    <SEO title={title} description={description} />
    <link rel="sitemap" href="/docs/sitemap-index.xml" />
    <style is:global set:html={globalStyles}></style>
    <Scripts />
  </head>
  <body>
    <MarketingHeader client:visible />
    <FullWidthContainer>
      <LayoutGrid showOnThisPage={Astro.props.headings.length > 0}>
        <Navigation url={pathname.replace(/\/$/g, "")} navItems={navItems} />
        <ContentContainer>
          <SearchMeta
            slug={slug}
            navItems={navItems}
            sidebarOrder={sidebarOrder}
          />
          <slot />
          <EditAndFeedback title={title} editUrl={editUrl} />
        </ContentContainer>
        {
          Astro.props.headings.length > 0 && (
            <OnThisPage headings={Astro.props.headings} />
          )
        }
      </LayoutGrid>
    </FullWidthContainer>
    <MarketingFooter />
    <script
      type="text/javascript"
      id="hs-script-loader"
      async
      defer
      src="//js.hs-scripts.com/45602133.js"></script>
  </body>
</html>
