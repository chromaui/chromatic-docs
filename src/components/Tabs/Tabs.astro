---
import { color } from "@chromatic-com/tetra";
import { processPanels } from "./rehype-tabs";

const panelHtml = await Astro.slots.render("default");

const { html, panels } = processPanels(panelHtml);
---

<code-snippet-tabs>
  {
    panels && (
      <div class="tablist-wrapper not-content">
        <ul role="tablist">
          {panels.map(({ label, panelId, tabId }, idx) => (
            <li role="presentation" class="tab">
              <a
                role="tab"
                href={"#" + panelId}
                id={tabId}
                aria-selected={idx === 0 && "true"}
                tabindex={idx !== 0 ? -1 : 0}
              >
                {label}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )
  }
  <Fragment set:html={html} />
</code-snippet-tabs>

<style
  define:vars={{
    blue500: color.blue500,
    slate500: color.slate500,
    blackTr10: color.blackTr10,
  }}
>
  code-snippet-tabs {
    display: block;
  }

  .tablist-wrapper {
    overflow-x: auto;
  }

  [role="tablist"] {
    display: flex;
    list-style: none;
    box-shadow: var(--blackTr10) 0 -1px 0px 0px inset;
    padding: 0;
    margin: 0;
  }

  .tab {
    margin: 0;
  }
  .tab > [role="tab"] {
    display: flex;
    align-items: center;
    height: 2.5rem;
    padding: 0 1rem;
    text-decoration: none;
    color: var(--slate500);
    font-weight: 700;
  }
  .tab [role="tab"][aria-selected] {
    color: var(--blue500);
    box-shadow: var(--blue500) 0 -3px 0 0 inset;
  }
  .tab > [role="tab"]:focus-visible {
    background-color: rgba(30, 167, 253, 0.14);
  }
</style>

<script>
  class CodeSnippetTabs extends HTMLElement {
    tabs: HTMLAnchorElement[];
    panels: HTMLElement[];

    constructor() {
      super();
      const tablist = this.querySelector<HTMLUListElement>('[role="tablist"]')!;
      this.tabs = [
        ...tablist.querySelectorAll<HTMLAnchorElement>('[role="tab"]'),
      ];
      this.panels = [
        ...this.querySelectorAll<HTMLElement>(':scope > [role="tabpanel"]'),
      ];

      this.tabs.forEach((tab, i) => {
        // Handle clicks for mouse users
        tab.addEventListener("click", (e) => {
          e.preventDefault();
          const currentTab = tablist.querySelector("[aria-selected]");
          if (e.currentTarget !== currentTab) {
            this.switchTab(e.currentTarget as HTMLAnchorElement, i);
          }
        });

        // Handle keyboard input
        tab.addEventListener("keydown", (e) => {
          const index = this.tabs.indexOf(e.currentTarget as any);
          // Work out which key the user is pressing and
          // Calculate the new tab's index where appropriate
          const nextIndex =
            e.key === "ArrowLeft"
              ? index - 1
              : e.key === "ArrowRight"
                ? index + 1
                : e.key === "Home"
                  ? 0
                  : e.key === "End"
                    ? this.tabs.length - 1
                    : null;
          if (nextIndex === null) return;
          if (this.tabs[nextIndex]) {
            e.preventDefault();
            this.switchTab(this.tabs[nextIndex], nextIndex);
          }
        });
      });
    }

    switchTab(newTab: HTMLAnchorElement | null | undefined, index: number) {
      if (!newTab) return;

      // Mark all tabs as unselected and hide all tab panels.
      this.tabs.forEach((tab) => {
        tab.removeAttribute("aria-selected");
        tab.setAttribute("tabindex", "-1");
      });
      this.panels.forEach((oldPanel) => {
        oldPanel.hidden = true;
      });

      // Show new panel and mark new tab as selected.
      const newPanel = this.panels[index];
      if (newPanel) newPanel.hidden = false;
      // Restore active tab to the default tab order.
      newTab.removeAttribute("tabindex");
      newTab.setAttribute("aria-selected", "true");
      newTab.focus();
    }
  }

  customElements.define("code-snippet-tabs", CodeSnippetTabs);
</script>
